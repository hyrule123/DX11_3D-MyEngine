#pragma once

#include <regex>
#include <filesystem>

namespace stdfs = std::filesystem;

#ifndef DEBUG_BREAK
#ifdef _DEBUG
#define DEBUG_BREAK DebugBreak()
#else
#define DEBUG_BREAK
#endif
#endif

//Release 모드에서도 작동
#ifdef _DEBUG
#define ASSERT(_expression, _message) \
	if (!(_expression)) \
		{ _wassert(L ## #_expression##"\n"##_message , _CRT_WIDE(__FILE__), (unsigned)(__LINE__)); }
#else
#define ASSERT(_expression, _message) if(!(_expression)) { \
		MessageBoxW(nullptr, L## #_expression##"\n"##_message, L"Assertion Failed!", MB_OK | MB_ICONERROR);\
		std::abort();\
	}
#endif


//#define PRESET constexpr const char*

#define PRESET(_VarNameBase, _String) \
namespace _VarNameBase {\
constexpr const char* A = _String;\
constexpr const wchar_t* W = L##_String;\
}


namespace define_Preset
{
	namespace Path
	{
		PRESET(ContentsProj, "./Project/UserContents");
		PRESET(EngineProj, "./Project/EngineBase/Engine");
		PRESET(EngineComponent, "./Project/EngineBase/Engine/Game/Component");
		PRESET(Shader_Proj, "./Project/UserShader");


#ifdef _DEBUG
		PRESET(Resources, "./Output/Debug/Res");
#else
		PRESET(Resources, "./Output/Release/Res");
#endif
	}
	
	namespace Keyword
	{
		PRESET(EngineMasterNamespace, "namespace ehw");



		PRESET(arrNumThreads, "arrNumThreads");
		
		PRESET(ScriptPrefix, "Script_");

		PRESET(IncludeBegin, "#include \"");

		PRESET(NameSpace, "namespace ");

		PRESET(ConstexprInlineConstChar, "PRESET(");
		PRESET(EqualDoubleQuotation, ", \"");
		PRESET(EnumClass, "enum class ");
		PRESET(strKey, "strKey_");

		PRESET(DefineSTRKEY, 
R"(#ifndef STRKEY
#define STRKEY constexpr const char*
#endif
)");

		PRESET(PragmaOnce, R"(#pragma once
)");

		PRESET(Head, R"(
//=========================================================
//This Code is Automatically generated by CodeGenerator.exe
//=========================================================

)");
		PRESET(Define_Constructor_T,
			R"(#define CONSTRUCTOR_T(T) )"
		);

		PRESET(Constructor_T, "CONSTRUCTOR_T(");
	}




	namespace Regex
	{

		constexpr const char* arrCharsVarForbiddenA[] =
		{
			"\\(","\\)",
			"\\{","\\}",
			"\\[","\\]",
			"\\.","\\s"
		};


		namespace g_VarForbiddenChars
		{
			extern std::regex A;
			extern std::wregex W;
			void CreateVarForbiddenRegex();
		}

		PRESET(AllShader, R"(\w+\.hlsl$)");
		PRESET(CShaderRegex, R"(CS_\w+\.hlsl$)");
		PRESET(ScriptRegex, R"(Script_\w+\.h)");
		PRESET(ComponentRegex, R"(^Com_\w+\.h)");
		PRESET(SceneRegex, R"(Scene_\w+\.h)");
		
		//[   numthreads   ( %d, %d, %d )   ]
		//[ ] 안에 둘러싸여 있고, 공백 갯수에 상관없이 숫자 3개를 추출
		PRESET(Numthread, R"(.*\((\d+),(\d+),(\d+\)).*)");
	}
}


#include "../Engine/GPU/define_GPU.h"
namespace define_ShaderGen
{
	struct tShaderSetting
	{
		stdfs::path FileName[(int)ehw::eGSStage::END];
	};
}

